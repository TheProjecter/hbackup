DESCRIPTION

This is a backup program. The name hbackup has been chosen because of the way
data is stored: based on the file hash (a la git).

Why yet another backup program? Because I wanted something geared towards what
I do: software development. This system can easily be made to recognise
version-controlled directories to optimise backup choices: why backup files
that are on a server somewhere, itself with its own backup system?

SERVER CONFIGURATION

The default configuration file is /etc/hbackup.conf, and can be overriden using
the -c option. The following keywords are acceptable there:
* db gives the backup database path. The default is '/hbackup'.
  Syntax:  db "<path to backup database>"
  Example: db "/backup"
* client gives the client name.
  Syntax:  client "<client desired name>"
  Example: client "montblanc"

The client keyword can be followed by the following keywords:
* protocol is mandatory and can be file, smb or nfs.
  Syntax:  protocol "<protocol name>"
  Example: protocol "smb"
* listfile is mandatory as it gives the path to the backup list file.
  Syntax:         listfile "<path to file>"
  Example (smb):  listfile "C:/Backup/hbackup.list"
  Example (file): listfile "/etc/hbackup.list"
* hostname is required for smb and nfs protocols.
  Syntax:               hostname "<host name or IP address>"
  Example (name):       hostname "everest"
  Example (IP address): hostname "192.168.0.2"
* option can be used to specify any file system option.
  Syntax:  option <option name>
  Syntax:  option <option name> "<option value>"
  Example: option nocase
  Example: option nolock
  Example: option username "herve"
  Example: option iocharset "utf8"

CLIENT CONFIGURATION

Each client must provide its own configuration file. Keywords that may be used:
* path: start of a new backup list, gives the path information.
  Syntax: path "<path to backup>"
* ignore: add files filter to skip (see FILTERS below).
* ignand: add AND condition to last files filter (see FILTERS below).
* parser: files under version control (see PARSERS below).

COMPRESSION

No compression is enabled for now.

FILTERS

Syntax: [ignore|ignand] <filter type> "<string>"

There are six filter types:
* type:         match file type
* path_end:     match end of path
* path_start:   match start of path
* path_regexp:  match regular expression on path
* size_above:   match files which size is above or equals given value
* size_below:   match files which size is below or equals given value

There are seven file types:
* file: regular file
* dir: directory
* char: character device
* block: block device
* pipe: FIFO
* link: symbolic link
* socket

Example:
ignore path_start abr
ignand type file
ignand size_above 5000

This will ignore all regular files which name starts in abr (abr*) and size is
greater than or equal to 5000.

PARSERS

Syntax: parser [<mode>] "<parser name>"

There are four modes:
* mod: backup files under control, that were modified locally
* oth: backup files not under control
* mod+oth: backup files in the two cases above
* anything else or nothing: backup all files under control

Only one parser is implemented at the moment:
* cvs: this parser does not check for file modification

Note: parsers that do not check for file modification backup all controlled
files if mod was chosen or all files if mod+oth was chosen.
