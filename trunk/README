DESCRIPTION

This is a backup program. The name hbackup has been chosen because of the way
data is stored: based on the file hash (a la git).

Why yet another backup program? Because I wanted something geared towards what
I do: software development. This system can easily be made to recognise
version-controlled directories to optimise backup choices: why backup files
that are on a server somewhere, itself with its own backup system?

SERVER CONFIGURATION

The default configuration file is /etc/hbackup.conf, and can be overriden using
the -c option. Only two keywords are acceptable there: 'db' and 'client'.
* db gives the backup database path. The default is '/hbackup'. Syntax:
  db "<path to backup database>"
* client gives the necessary information for all clients to backup. Syntax:
  client <protocol>://[<username>[:<password>]@]<hostname> "<path to list>"

CLIENT CONFIGURATION

Each client must provide its own configuration file. Keywords that may be used:
* path: start of a new backup list, gives the path information.
  Syntax: path "<path to backup>"
* ignore: files to ignore (see FILTERS below).
* parser: files under version control (see PARSERS below).

COMPRESSION

All files above 100 bytes are compressed using a gzip-compatible method.

FILTERS

Syntax: ignore [<file type>/]<filter type> "<string>"

There are seven file types:
* file: regular file
* dir: directory
* char: character device
* block: block device
* pipe: FIFO
* link: symbolic link
* socket

There are five filter types:
* path_end: match end of path
* path_start: match start of path
* path_regexp: match regular expression on path
* size_above: match files which size is above given value (file type n/a)
* size_below: match files which size is below given value (file type n/a)

PARSERS

Syntax: parser [<mode>] "<parser name>"

There are four modes:
* mod: backup files under control, that were modified locally
* oth: backup files not under control
* mod+oth: backup files in the two cases above
* anything else or nothing: backup all files under control

Only one parser is implemented at the moment:
* cvs: this parser does not check for file modification

Note: parsers that do not check for file modification return a special code, and
all controlled files get backed up if mod was chosen (all files if mod+oth).